#+property: header-args :wrap src text
#+property: header-args:text :eval never

* Scaling and Plotting Attributes in ~conexp-clj~

~conexp-clj~ provides a number of functions to visualize the distribution of attributes in contexts, and derive appropriate scales from them.
The following context will be used as an example in this documentation:
#+begin_src clojure
(def ctx (make-mv-context #{"Brainstorm" "Swords to Plowshares" "Stoneforge Mystic" "Tundra" "Supreme Verdict" "Batterskull" "Force of Will"}
                             #{"Type" "CMC" "Copies" "Mana Cost"}
                             #{["Brainstorm" "Type" "Instant"] ["Brainstorm" "CMC" 1] ["Brainstorm" "Copies" "4"] ["Brainstorm" "Mana Cost" "U"]
                               ["Swords to Plowshares" "Type" "Instant"] ["Swords to Plowshares" "CMC" 1] ["Swords to Plowshares" "Copies" "4"] ["Swords to Plowshares" "Mana Cost" "W"]
                               ["Stoneforge Mystic" "Type" "Creature"] ["Stoneforge Mystic" "CMC" 2] ["Stoneforge Mystic" "Copies" "4"] ["Stoneforge Mystic" "Mana Cost" "1W"]
                               ["Tundra" "Type" "Land"] ["Tundra" "CMC" 0] ["Tundra" "Copies" "2"] ["Tundra" "Mana Cost" "-"]
                               ["Supreme Verdict" "Type" "Sorcery"] ["Supreme Verdict" "CMC" 4] ["Supreme Verdict" "Copies" "1"] ["Supreme Verdict" "Mana Cost" "1WWU"]
                               ["Batterskull" "Type" "Artifact"] ["Batterskull" "CMC" 5] ["Batterskull" "Copies" "1"] ["Batterskull" "Mana Cost" "5"]
                               ["Force of Will" "Type" "Instant"] ["Force of Will" "CMC" 5] ["Force of Will" "Copies" "4"] ["Force of Will" "Mana Cost" "3UU"]}))
#+end_src

** Plotting Attribute Distributions

The ~plot-attribute-values~ function may be used to create a bar chart of how often each value occurs for any given attribute.
It takes the context, as well as the attribute in question as arguments.

#+begin_src clojure
(def chart (plot-attribute-values ctx "Copies"))
#+end_src

All charts can be displayed using the ~render-chart~ function:

#+begin_src clojure
(render-chart chart)
#+end_src

[[./images/AttributePlot.png]]

A plot displaying the distribution for all attributed may be created using the ~plot-all-attribute-values~ function.

The values of an attribute may be broken down into intervals using the ~plot-attribute-value-intervals~ function.
As parameters the function requires either a vector manually selected intervals, or a number of intervals the values are to be divided into.
These can be identified using the keywords ~:intervals~ and ~num_intervals~ respectively.
 
#+begin_src clojure
(def chart (plot-attribute-value-intervals ctx "Copies" :intervals [[1 2] [1 3] [2 4]]))
(render-chart chart)
#+end_src

[[./images/IntervalPlot.png]]

#+begin_src clojure
(def chart (plot-attribute-value-intervals ctx "Copies" :num_intervals 3))
(render-chart chart)
#+end_src

[[./images/IntervalPlot2.png]]

If the attribute is not numeric, an order needs to be provided as a vector of elements. Each value of the attribute in ~ctx~ needs to be present in the order.
The ~:order~ keywords workis in combination with both previously discussed options.

#+begin_src clojure
(def order ["-" "U" "W" "1W" "1WWU" "5" "3UU"])
(def chart (plot-attribute-value-intervals ctx "Mana Cost" :intervals [["-" "W"]["1W" "1WWU"]["5" "3UU"]] :order order))
(render-chart chart)
#+end_src

[[./images/IntervalPlot3.png]]

** Retrieving Scaling Contexts

The function ~generate-interval-scale~ can be used to retrieve a context representing the scaling implied by the intervals.
It accepts the same arguments as the ~plot-all-attribute-values~ function, and produces an equivalent context.

#+begin_src clojure
(generate-interval-scale ctx "Mana Cost" :num_intervals 3 :order order)
#+end_src

#+RESULTS:
#+begin_src text
     |[--W] [1W-5] [3UU-3UU] 
-----+-----------------------
-    |x     .      .         
1W   |.     x      .         
1WWU |.     x      .         
3UU  |.     .      x         
5    |.     x      .         
U    |x     .      .         
W    |x     .      .  

#+end_src


